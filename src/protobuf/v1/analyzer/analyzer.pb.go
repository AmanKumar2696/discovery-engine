// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/analyzer/analyzer.proto

package analyzer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NetworkLogs struct {
	NwLog                []*KnoxNetworkLog `protobuf:"bytes,1,rep,name=NwLog,proto3" json:"NwLog,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NetworkLogs) Reset()         { *m = NetworkLogs{} }
func (m *NetworkLogs) String() string { return proto.CompactTextString(m) }
func (*NetworkLogs) ProtoMessage()    {}
func (*NetworkLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{0}
}

func (m *NetworkLogs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkLogs.Unmarshal(m, b)
}
func (m *NetworkLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkLogs.Marshal(b, m, deterministic)
}
func (m *NetworkLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkLogs.Merge(m, src)
}
func (m *NetworkLogs) XXX_Size() int {
	return xxx_messageInfo_NetworkLogs.Size(m)
}
func (m *NetworkLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkLogs.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkLogs proto.InternalMessageInfo

func (m *NetworkLogs) GetNwLog() []*KnoxNetworkLog {
	if m != nil {
		return m.NwLog
	}
	return nil
}

type NetworkPolicies struct {
	NwPolicies           []*KnoxNetworkPolicy `protobuf:"bytes,1,rep,name=NwPolicies,proto3" json:"NwPolicies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NetworkPolicies) Reset()         { *m = NetworkPolicies{} }
func (m *NetworkPolicies) String() string { return proto.CompactTextString(m) }
func (*NetworkPolicies) ProtoMessage()    {}
func (*NetworkPolicies) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{1}
}

func (m *NetworkPolicies) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkPolicies.Unmarshal(m, b)
}
func (m *NetworkPolicies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkPolicies.Marshal(b, m, deterministic)
}
func (m *NetworkPolicies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicies.Merge(m, src)
}
func (m *NetworkPolicies) XXX_Size() int {
	return xxx_messageInfo_NetworkPolicies.Size(m)
}
func (m *NetworkPolicies) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicies.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicies proto.InternalMessageInfo

func (m *NetworkPolicies) GetNwPolicies() []*KnoxNetworkPolicy {
	if m != nil {
		return m.NwPolicies
	}
	return nil
}

type SystemLogs struct {
	SysLog               []*KnoxSystemLog `protobuf:"bytes,1,rep,name=SysLog,proto3" json:"SysLog,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SystemLogs) Reset()         { *m = SystemLogs{} }
func (m *SystemLogs) String() string { return proto.CompactTextString(m) }
func (*SystemLogs) ProtoMessage()    {}
func (*SystemLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{2}
}

func (m *SystemLogs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemLogs.Unmarshal(m, b)
}
func (m *SystemLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemLogs.Marshal(b, m, deterministic)
}
func (m *SystemLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemLogs.Merge(m, src)
}
func (m *SystemLogs) XXX_Size() int {
	return xxx_messageInfo_SystemLogs.Size(m)
}
func (m *SystemLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemLogs.DiscardUnknown(m)
}

var xxx_messageInfo_SystemLogs proto.InternalMessageInfo

func (m *SystemLogs) GetSysLog() []*KnoxSystemLog {
	if m != nil {
		return m.SysLog
	}
	return nil
}

type SystemPolicies struct {
	SysPolicies          []*KnoxSystemPolicy `protobuf:"bytes,1,rep,name=SysPolicies,proto3" json:"SysPolicies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SystemPolicies) Reset()         { *m = SystemPolicies{} }
func (m *SystemPolicies) String() string { return proto.CompactTextString(m) }
func (*SystemPolicies) ProtoMessage()    {}
func (*SystemPolicies) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{3}
}

func (m *SystemPolicies) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemPolicies.Unmarshal(m, b)
}
func (m *SystemPolicies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemPolicies.Marshal(b, m, deterministic)
}
func (m *SystemPolicies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemPolicies.Merge(m, src)
}
func (m *SystemPolicies) XXX_Size() int {
	return xxx_messageInfo_SystemPolicies.Size(m)
}
func (m *SystemPolicies) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemPolicies.DiscardUnknown(m)
}

var xxx_messageInfo_SystemPolicies proto.InternalMessageInfo

func (m *SystemPolicies) GetSysPolicies() []*KnoxSystemPolicy {
	if m != nil {
		return m.SysPolicies
	}
	return nil
}

type Selector struct {
	MatchLabels          map[string]string `protobuf:"bytes,1,rep,name=MatchLabels,proto3" json:"MatchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Selector) Reset()         { *m = Selector{} }
func (m *Selector) String() string { return proto.CompactTextString(m) }
func (*Selector) ProtoMessage()    {}
func (*Selector) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{4}
}

func (m *Selector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Selector.Unmarshal(m, b)
}
func (m *Selector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Selector.Marshal(b, m, deterministic)
}
func (m *Selector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Selector.Merge(m, src)
}
func (m *Selector) XXX_Size() int {
	return xxx_messageInfo_Selector.Size(m)
}
func (m *Selector) XXX_DiscardUnknown() {
	xxx_messageInfo_Selector.DiscardUnknown(m)
}

var xxx_messageInfo_Selector proto.InternalMessageInfo

func (m *Selector) GetMatchLabels() map[string]string {
	if m != nil {
		return m.MatchLabels
	}
	return nil
}

type KnoxSystemPolicy struct {
	APIVersion           string            `protobuf:"bytes,1,opt,name=APIVersion,proto3" json:"APIVersion,omitempty"`
	Kind                 string            `protobuf:"bytes,2,opt,name=Kind,proto3" json:"Kind,omitempty"`
	Metadata             map[string]string `protobuf:"bytes,3,rep,name=Metadata,proto3" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Outdated             string            `protobuf:"bytes,4,opt,name=Outdated,proto3" json:"Outdated,omitempty"`
	SysSpec              *KnoxSystemSpec   `protobuf:"bytes,5,opt,name=SysSpec,proto3" json:"SysSpec,omitempty"`
	GeneratedTime        int64             `protobuf:"varint,6,opt,name=GeneratedTime,proto3" json:"GeneratedTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *KnoxSystemPolicy) Reset()         { *m = KnoxSystemPolicy{} }
func (m *KnoxSystemPolicy) String() string { return proto.CompactTextString(m) }
func (*KnoxSystemPolicy) ProtoMessage()    {}
func (*KnoxSystemPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{5}
}

func (m *KnoxSystemPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnoxSystemPolicy.Unmarshal(m, b)
}
func (m *KnoxSystemPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnoxSystemPolicy.Marshal(b, m, deterministic)
}
func (m *KnoxSystemPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnoxSystemPolicy.Merge(m, src)
}
func (m *KnoxSystemPolicy) XXX_Size() int {
	return xxx_messageInfo_KnoxSystemPolicy.Size(m)
}
func (m *KnoxSystemPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_KnoxSystemPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_KnoxSystemPolicy proto.InternalMessageInfo

func (m *KnoxSystemPolicy) GetAPIVersion() string {
	if m != nil {
		return m.APIVersion
	}
	return ""
}

func (m *KnoxSystemPolicy) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *KnoxSystemPolicy) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *KnoxSystemPolicy) GetOutdated() string {
	if m != nil {
		return m.Outdated
	}
	return ""
}

func (m *KnoxSystemPolicy) GetSysSpec() *KnoxSystemSpec {
	if m != nil {
		return m.SysSpec
	}
	return nil
}

func (m *KnoxSystemPolicy) GetGeneratedTime() int64 {
	if m != nil {
		return m.GeneratedTime
	}
	return 0
}

type KnoxSystemSpec struct {
	Severity             int32                 `protobuf:"varint,1,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Tags                 []string              `protobuf:"bytes,2,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Message              string                `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
	SystemSelector       *Selector             `protobuf:"bytes,4,opt,name=SystemSelector,proto3" json:"SystemSelector,omitempty"`
	Process              *KnoxSys              `protobuf:"bytes,5,opt,name=Process,proto3" json:"Process,omitempty"`
	File                 *KnoxSys              `protobuf:"bytes,6,opt,name=File,proto3" json:"File,omitempty"`
	Network              []*KnoxMatchProtocols `protobuf:"bytes,7,rep,name=Network,proto3" json:"Network,omitempty"`
	Action               string                `protobuf:"bytes,8,opt,name=Action,proto3" json:"Action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *KnoxSystemSpec) Reset()         { *m = KnoxSystemSpec{} }
func (m *KnoxSystemSpec) String() string { return proto.CompactTextString(m) }
func (*KnoxSystemSpec) ProtoMessage()    {}
func (*KnoxSystemSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{6}
}

func (m *KnoxSystemSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnoxSystemSpec.Unmarshal(m, b)
}
func (m *KnoxSystemSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnoxSystemSpec.Marshal(b, m, deterministic)
}
func (m *KnoxSystemSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnoxSystemSpec.Merge(m, src)
}
func (m *KnoxSystemSpec) XXX_Size() int {
	return xxx_messageInfo_KnoxSystemSpec.Size(m)
}
func (m *KnoxSystemSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_KnoxSystemSpec.DiscardUnknown(m)
}

var xxx_messageInfo_KnoxSystemSpec proto.InternalMessageInfo

func (m *KnoxSystemSpec) GetSeverity() int32 {
	if m != nil {
		return m.Severity
	}
	return 0
}

func (m *KnoxSystemSpec) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *KnoxSystemSpec) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *KnoxSystemSpec) GetSystemSelector() *Selector {
	if m != nil {
		return m.SystemSelector
	}
	return nil
}

func (m *KnoxSystemSpec) GetProcess() *KnoxSys {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *KnoxSystemSpec) GetFile() *KnoxSys {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *KnoxSystemSpec) GetNetwork() []*KnoxMatchProtocols {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *KnoxSystemSpec) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type KnoxSys struct {
	MatchPaths           []*KnoxMatchPaths       `protobuf:"bytes,1,rep,name=MatchPaths,proto3" json:"MatchPaths,omitempty"`
	MatchDirectories     []*KnoxMatchDirectories `protobuf:"bytes,2,rep,name=MatchDirectories,proto3" json:"MatchDirectories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *KnoxSys) Reset()         { *m = KnoxSys{} }
func (m *KnoxSys) String() string { return proto.CompactTextString(m) }
func (*KnoxSys) ProtoMessage()    {}
func (*KnoxSys) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{7}
}

func (m *KnoxSys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnoxSys.Unmarshal(m, b)
}
func (m *KnoxSys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnoxSys.Marshal(b, m, deterministic)
}
func (m *KnoxSys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnoxSys.Merge(m, src)
}
func (m *KnoxSys) XXX_Size() int {
	return xxx_messageInfo_KnoxSys.Size(m)
}
func (m *KnoxSys) XXX_DiscardUnknown() {
	xxx_messageInfo_KnoxSys.DiscardUnknown(m)
}

var xxx_messageInfo_KnoxSys proto.InternalMessageInfo

func (m *KnoxSys) GetMatchPaths() []*KnoxMatchPaths {
	if m != nil {
		return m.MatchPaths
	}
	return nil
}

func (m *KnoxSys) GetMatchDirectories() []*KnoxMatchDirectories {
	if m != nil {
		return m.MatchDirectories
	}
	return nil
}

type KnoxMatchProtocols struct {
	Protocol             string            `protobuf:"bytes,1,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	FromSource           []*KnoxFromSource `protobuf:"bytes,2,rep,name=FromSource,proto3" json:"FromSource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *KnoxMatchProtocols) Reset()         { *m = KnoxMatchProtocols{} }
func (m *KnoxMatchProtocols) String() string { return proto.CompactTextString(m) }
func (*KnoxMatchProtocols) ProtoMessage()    {}
func (*KnoxMatchProtocols) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{8}
}

func (m *KnoxMatchProtocols) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnoxMatchProtocols.Unmarshal(m, b)
}
func (m *KnoxMatchProtocols) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnoxMatchProtocols.Marshal(b, m, deterministic)
}
func (m *KnoxMatchProtocols) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnoxMatchProtocols.Merge(m, src)
}
func (m *KnoxMatchProtocols) XXX_Size() int {
	return xxx_messageInfo_KnoxMatchProtocols.Size(m)
}
func (m *KnoxMatchProtocols) XXX_DiscardUnknown() {
	xxx_messageInfo_KnoxMatchProtocols.DiscardUnknown(m)
}

var xxx_messageInfo_KnoxMatchProtocols proto.InternalMessageInfo

func (m *KnoxMatchProtocols) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *KnoxMatchProtocols) GetFromSource() []*KnoxFromSource {
	if m != nil {
		return m.FromSource
	}
	return nil
}

type KnoxMatchPaths struct {
	Path                 string            `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	ReadOnly             bool              `protobuf:"varint,2,opt,name=ReadOnly,proto3" json:"ReadOnly,omitempty"`
	OwnerOnly            bool              `protobuf:"varint,3,opt,name=OwnerOnly,proto3" json:"OwnerOnly,omitempty"`
	FromSource           []*KnoxFromSource `protobuf:"bytes,4,rep,name=FromSource,proto3" json:"FromSource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *KnoxMatchPaths) Reset()         { *m = KnoxMatchPaths{} }
func (m *KnoxMatchPaths) String() string { return proto.CompactTextString(m) }
func (*KnoxMatchPaths) ProtoMessage()    {}
func (*KnoxMatchPaths) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{9}
}

func (m *KnoxMatchPaths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnoxMatchPaths.Unmarshal(m, b)
}
func (m *KnoxMatchPaths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnoxMatchPaths.Marshal(b, m, deterministic)
}
func (m *KnoxMatchPaths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnoxMatchPaths.Merge(m, src)
}
func (m *KnoxMatchPaths) XXX_Size() int {
	return xxx_messageInfo_KnoxMatchPaths.Size(m)
}
func (m *KnoxMatchPaths) XXX_DiscardUnknown() {
	xxx_messageInfo_KnoxMatchPaths.DiscardUnknown(m)
}

var xxx_messageInfo_KnoxMatchPaths proto.InternalMessageInfo

func (m *KnoxMatchPaths) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *KnoxMatchPaths) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *KnoxMatchPaths) GetOwnerOnly() bool {
	if m != nil {
		return m.OwnerOnly
	}
	return false
}

func (m *KnoxMatchPaths) GetFromSource() []*KnoxFromSource {
	if m != nil {
		return m.FromSource
	}
	return nil
}

type KnoxMatchDirectories struct {
	Dir                  string            `protobuf:"bytes,1,opt,name=Dir,proto3" json:"Dir,omitempty"`
	ReadOnly             bool              `protobuf:"varint,2,opt,name=ReadOnly,proto3" json:"ReadOnly,omitempty"`
	OwnerOnly            bool              `protobuf:"varint,3,opt,name=OwnerOnly,proto3" json:"OwnerOnly,omitempty"`
	FromSource           []*KnoxFromSource `protobuf:"bytes,4,rep,name=FromSource,proto3" json:"FromSource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *KnoxMatchDirectories) Reset()         { *m = KnoxMatchDirectories{} }
func (m *KnoxMatchDirectories) String() string { return proto.CompactTextString(m) }
func (*KnoxMatchDirectories) ProtoMessage()    {}
func (*KnoxMatchDirectories) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{10}
}

func (m *KnoxMatchDirectories) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnoxMatchDirectories.Unmarshal(m, b)
}
func (m *KnoxMatchDirectories) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnoxMatchDirectories.Marshal(b, m, deterministic)
}
func (m *KnoxMatchDirectories) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnoxMatchDirectories.Merge(m, src)
}
func (m *KnoxMatchDirectories) XXX_Size() int {
	return xxx_messageInfo_KnoxMatchDirectories.Size(m)
}
func (m *KnoxMatchDirectories) XXX_DiscardUnknown() {
	xxx_messageInfo_KnoxMatchDirectories.DiscardUnknown(m)
}

var xxx_messageInfo_KnoxMatchDirectories proto.InternalMessageInfo

func (m *KnoxMatchDirectories) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *KnoxMatchDirectories) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *KnoxMatchDirectories) GetOwnerOnly() bool {
	if m != nil {
		return m.OwnerOnly
	}
	return false
}

func (m *KnoxMatchDirectories) GetFromSource() []*KnoxFromSource {
	if m != nil {
		return m.FromSource
	}
	return nil
}

type KnoxFromSource struct {
	Path                 string   `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Dir                  string   `protobuf:"bytes,2,opt,name=Dir,proto3" json:"Dir,omitempty"`
	Recursive            bool     `protobuf:"varint,3,opt,name=Recursive,proto3" json:"Recursive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KnoxFromSource) Reset()         { *m = KnoxFromSource{} }
func (m *KnoxFromSource) String() string { return proto.CompactTextString(m) }
func (*KnoxFromSource) ProtoMessage()    {}
func (*KnoxFromSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{11}
}

func (m *KnoxFromSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnoxFromSource.Unmarshal(m, b)
}
func (m *KnoxFromSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnoxFromSource.Marshal(b, m, deterministic)
}
func (m *KnoxFromSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnoxFromSource.Merge(m, src)
}
func (m *KnoxFromSource) XXX_Size() int {
	return xxx_messageInfo_KnoxFromSource.Size(m)
}
func (m *KnoxFromSource) XXX_DiscardUnknown() {
	xxx_messageInfo_KnoxFromSource.DiscardUnknown(m)
}

var xxx_messageInfo_KnoxFromSource proto.InternalMessageInfo

func (m *KnoxFromSource) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *KnoxFromSource) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *KnoxFromSource) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

type KnoxNetworkPolicy struct {
	APIVersion           string            `protobuf:"bytes,1,opt,name=APIVersion,proto3" json:"APIVersion,omitempty"`
	Kind                 string            `protobuf:"bytes,2,opt,name=Kind,proto3" json:"Kind,omitempty"`
	FlowIDs              []int32           `protobuf:"varint,3,rep,packed,name=FlowIDs,proto3" json:"FlowIDs,omitempty"`
	Metadata             map[string]string `protobuf:"bytes,4,rep,name=Metadata,proto3" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Outdated             string            `protobuf:"bytes,5,opt,name=Outdated,proto3" json:"Outdated,omitempty"`
	NetSpec              *KnoxNetworkSpec  `protobuf:"bytes,6,opt,name=NetSpec,proto3" json:"NetSpec,omitempty"`
	GeneratedTime        int64             `protobuf:"varint,7,opt,name=GeneratedTime,proto3" json:"GeneratedTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *KnoxNetworkPolicy) Reset()         { *m = KnoxNetworkPolicy{} }
func (m *KnoxNetworkPolicy) String() string { return proto.CompactTextString(m) }
func (*KnoxNetworkPolicy) ProtoMessage()    {}
func (*KnoxNetworkPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{12}
}

func (m *KnoxNetworkPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnoxNetworkPolicy.Unmarshal(m, b)
}
func (m *KnoxNetworkPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnoxNetworkPolicy.Marshal(b, m, deterministic)
}
func (m *KnoxNetworkPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnoxNetworkPolicy.Merge(m, src)
}
func (m *KnoxNetworkPolicy) XXX_Size() int {
	return xxx_messageInfo_KnoxNetworkPolicy.Size(m)
}
func (m *KnoxNetworkPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_KnoxNetworkPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_KnoxNetworkPolicy proto.InternalMessageInfo

func (m *KnoxNetworkPolicy) GetAPIVersion() string {
	if m != nil {
		return m.APIVersion
	}
	return ""
}

func (m *KnoxNetworkPolicy) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *KnoxNetworkPolicy) GetFlowIDs() []int32 {
	if m != nil {
		return m.FlowIDs
	}
	return nil
}

func (m *KnoxNetworkPolicy) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *KnoxNetworkPolicy) GetOutdated() string {
	if m != nil {
		return m.Outdated
	}
	return ""
}

func (m *KnoxNetworkPolicy) GetNetSpec() *KnoxNetworkSpec {
	if m != nil {
		return m.NetSpec
	}
	return nil
}

func (m *KnoxNetworkPolicy) GetGeneratedTime() int64 {
	if m != nil {
		return m.GeneratedTime
	}
	return 0
}

type KnoxNetworkSpec struct {
	NetworkSelector      *Selector  `protobuf:"bytes,1,opt,name=NetworkSelector,proto3" json:"NetworkSelector,omitempty"`
	Egressess            []*Egress  `protobuf:"bytes,2,rep,name=Egressess,proto3" json:"Egressess,omitempty"`
	Ingressess           []*Ingress `protobuf:"bytes,3,rep,name=Ingressess,proto3" json:"Ingressess,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *KnoxNetworkSpec) Reset()         { *m = KnoxNetworkSpec{} }
func (m *KnoxNetworkSpec) String() string { return proto.CompactTextString(m) }
func (*KnoxNetworkSpec) ProtoMessage()    {}
func (*KnoxNetworkSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{13}
}

func (m *KnoxNetworkSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnoxNetworkSpec.Unmarshal(m, b)
}
func (m *KnoxNetworkSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnoxNetworkSpec.Marshal(b, m, deterministic)
}
func (m *KnoxNetworkSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnoxNetworkSpec.Merge(m, src)
}
func (m *KnoxNetworkSpec) XXX_Size() int {
	return xxx_messageInfo_KnoxNetworkSpec.Size(m)
}
func (m *KnoxNetworkSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_KnoxNetworkSpec.DiscardUnknown(m)
}

var xxx_messageInfo_KnoxNetworkSpec proto.InternalMessageInfo

func (m *KnoxNetworkSpec) GetNetworkSelector() *Selector {
	if m != nil {
		return m.NetworkSelector
	}
	return nil
}

func (m *KnoxNetworkSpec) GetEgressess() []*Egress {
	if m != nil {
		return m.Egressess
	}
	return nil
}

func (m *KnoxNetworkSpec) GetIngressess() []*Ingress {
	if m != nil {
		return m.Ingressess
	}
	return nil
}

type Egress struct {
	MatchLabels          map[string]string `protobuf:"bytes,1,rep,name=MatchLabels,proto3" json:"MatchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ToPorts              []*SpecPort       `protobuf:"bytes,2,rep,name=ToPorts,proto3" json:"ToPorts,omitempty"`
	ToCIDRs              []*SpecCIDR       `protobuf:"bytes,3,rep,name=ToCIDRs,proto3" json:"ToCIDRs,omitempty"`
	ToEndtities          []string          `protobuf:"bytes,4,rep,name=ToEndtities,proto3" json:"ToEndtities,omitempty"`
	ToServices           []*SpecService    `protobuf:"bytes,5,rep,name=ToServices,proto3" json:"ToServices,omitempty"`
	ToFQDNs              []*SpecFQDN       `protobuf:"bytes,6,rep,name=ToFQDNs,proto3" json:"ToFQDNs,omitempty"`
	ToHTTPs              []*SpecHTTP       `protobuf:"bytes,7,rep,name=ToHTTPs,proto3" json:"ToHTTPs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Egress) Reset()         { *m = Egress{} }
func (m *Egress) String() string { return proto.CompactTextString(m) }
func (*Egress) ProtoMessage()    {}
func (*Egress) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{14}
}

func (m *Egress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Egress.Unmarshal(m, b)
}
func (m *Egress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Egress.Marshal(b, m, deterministic)
}
func (m *Egress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Egress.Merge(m, src)
}
func (m *Egress) XXX_Size() int {
	return xxx_messageInfo_Egress.Size(m)
}
func (m *Egress) XXX_DiscardUnknown() {
	xxx_messageInfo_Egress.DiscardUnknown(m)
}

var xxx_messageInfo_Egress proto.InternalMessageInfo

func (m *Egress) GetMatchLabels() map[string]string {
	if m != nil {
		return m.MatchLabels
	}
	return nil
}

func (m *Egress) GetToPorts() []*SpecPort {
	if m != nil {
		return m.ToPorts
	}
	return nil
}

func (m *Egress) GetToCIDRs() []*SpecCIDR {
	if m != nil {
		return m.ToCIDRs
	}
	return nil
}

func (m *Egress) GetToEndtities() []string {
	if m != nil {
		return m.ToEndtities
	}
	return nil
}

func (m *Egress) GetToServices() []*SpecService {
	if m != nil {
		return m.ToServices
	}
	return nil
}

func (m *Egress) GetToFQDNs() []*SpecFQDN {
	if m != nil {
		return m.ToFQDNs
	}
	return nil
}

func (m *Egress) GetToHTTPs() []*SpecHTTP {
	if m != nil {
		return m.ToHTTPs
	}
	return nil
}

type SpecPort struct {
	Port                 string   `protobuf:"bytes,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Protocol             string   `protobuf:"bytes,2,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecPort) Reset()         { *m = SpecPort{} }
func (m *SpecPort) String() string { return proto.CompactTextString(m) }
func (*SpecPort) ProtoMessage()    {}
func (*SpecPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{15}
}

func (m *SpecPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecPort.Unmarshal(m, b)
}
func (m *SpecPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecPort.Marshal(b, m, deterministic)
}
func (m *SpecPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecPort.Merge(m, src)
}
func (m *SpecPort) XXX_Size() int {
	return xxx_messageInfo_SpecPort.Size(m)
}
func (m *SpecPort) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecPort.DiscardUnknown(m)
}

var xxx_messageInfo_SpecPort proto.InternalMessageInfo

func (m *SpecPort) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *SpecPort) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type SpecCIDR struct {
	CIDRs                []string `protobuf:"bytes,1,rep,name=CIDRs,proto3" json:"CIDRs,omitempty"`
	Except               []string `protobuf:"bytes,2,rep,name=Except,proto3" json:"Except,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecCIDR) Reset()         { *m = SpecCIDR{} }
func (m *SpecCIDR) String() string { return proto.CompactTextString(m) }
func (*SpecCIDR) ProtoMessage()    {}
func (*SpecCIDR) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{16}
}

func (m *SpecCIDR) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecCIDR.Unmarshal(m, b)
}
func (m *SpecCIDR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecCIDR.Marshal(b, m, deterministic)
}
func (m *SpecCIDR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecCIDR.Merge(m, src)
}
func (m *SpecCIDR) XXX_Size() int {
	return xxx_messageInfo_SpecCIDR.Size(m)
}
func (m *SpecCIDR) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecCIDR.DiscardUnknown(m)
}

var xxx_messageInfo_SpecCIDR proto.InternalMessageInfo

func (m *SpecCIDR) GetCIDRs() []string {
	if m != nil {
		return m.CIDRs
	}
	return nil
}

func (m *SpecCIDR) GetExcept() []string {
	if m != nil {
		return m.Except
	}
	return nil
}

type SpecService struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecService) Reset()         { *m = SpecService{} }
func (m *SpecService) String() string { return proto.CompactTextString(m) }
func (*SpecService) ProtoMessage()    {}
func (*SpecService) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{17}
}

func (m *SpecService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecService.Unmarshal(m, b)
}
func (m *SpecService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecService.Marshal(b, m, deterministic)
}
func (m *SpecService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecService.Merge(m, src)
}
func (m *SpecService) XXX_Size() int {
	return xxx_messageInfo_SpecService.Size(m)
}
func (m *SpecService) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecService.DiscardUnknown(m)
}

var xxx_messageInfo_SpecService proto.InternalMessageInfo

func (m *SpecService) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *SpecService) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type SpecFQDN struct {
	MatchNames           []string `protobuf:"bytes,1,rep,name=MatchNames,proto3" json:"MatchNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecFQDN) Reset()         { *m = SpecFQDN{} }
func (m *SpecFQDN) String() string { return proto.CompactTextString(m) }
func (*SpecFQDN) ProtoMessage()    {}
func (*SpecFQDN) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{18}
}

func (m *SpecFQDN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecFQDN.Unmarshal(m, b)
}
func (m *SpecFQDN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecFQDN.Marshal(b, m, deterministic)
}
func (m *SpecFQDN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecFQDN.Merge(m, src)
}
func (m *SpecFQDN) XXX_Size() int {
	return xxx_messageInfo_SpecFQDN.Size(m)
}
func (m *SpecFQDN) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecFQDN.DiscardUnknown(m)
}

var xxx_messageInfo_SpecFQDN proto.InternalMessageInfo

func (m *SpecFQDN) GetMatchNames() []string {
	if m != nil {
		return m.MatchNames
	}
	return nil
}

type SpecHTTP struct {
	Method               string   `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	Aggregated           bool     `protobuf:"varint,3,opt,name=Aggregated,proto3" json:"Aggregated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecHTTP) Reset()         { *m = SpecHTTP{} }
func (m *SpecHTTP) String() string { return proto.CompactTextString(m) }
func (*SpecHTTP) ProtoMessage()    {}
func (*SpecHTTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{19}
}

func (m *SpecHTTP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpecHTTP.Unmarshal(m, b)
}
func (m *SpecHTTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpecHTTP.Marshal(b, m, deterministic)
}
func (m *SpecHTTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecHTTP.Merge(m, src)
}
func (m *SpecHTTP) XXX_Size() int {
	return xxx_messageInfo_SpecHTTP.Size(m)
}
func (m *SpecHTTP) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecHTTP.DiscardUnknown(m)
}

var xxx_messageInfo_SpecHTTP proto.InternalMessageInfo

func (m *SpecHTTP) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *SpecHTTP) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SpecHTTP) GetAggregated() bool {
	if m != nil {
		return m.Aggregated
	}
	return false
}

type Ingress struct {
	MatchLabels          map[string]string `protobuf:"bytes,1,rep,name=MatchLabels,proto3" json:"MatchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ToPorts              []*SpecPort       `protobuf:"bytes,2,rep,name=ToPorts,proto3" json:"ToPorts,omitempty"`
	ToHTTPs              []*SpecHTTP       `protobuf:"bytes,3,rep,name=ToHTTPs,proto3" json:"ToHTTPs,omitempty"`
	FromCIDRs            []*SpecCIDR       `protobuf:"bytes,4,rep,name=FromCIDRs,proto3" json:"FromCIDRs,omitempty"`
	FromEntities         []string          `protobuf:"bytes,5,rep,name=FromEntities,proto3" json:"FromEntities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Ingress) Reset()         { *m = Ingress{} }
func (m *Ingress) String() string { return proto.CompactTextString(m) }
func (*Ingress) ProtoMessage()    {}
func (*Ingress) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{20}
}

func (m *Ingress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ingress.Unmarshal(m, b)
}
func (m *Ingress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ingress.Marshal(b, m, deterministic)
}
func (m *Ingress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ingress.Merge(m, src)
}
func (m *Ingress) XXX_Size() int {
	return xxx_messageInfo_Ingress.Size(m)
}
func (m *Ingress) XXX_DiscardUnknown() {
	xxx_messageInfo_Ingress.DiscardUnknown(m)
}

var xxx_messageInfo_Ingress proto.InternalMessageInfo

func (m *Ingress) GetMatchLabels() map[string]string {
	if m != nil {
		return m.MatchLabels
	}
	return nil
}

func (m *Ingress) GetToPorts() []*SpecPort {
	if m != nil {
		return m.ToPorts
	}
	return nil
}

func (m *Ingress) GetToHTTPs() []*SpecHTTP {
	if m != nil {
		return m.ToHTTPs
	}
	return nil
}

func (m *Ingress) GetFromCIDRs() []*SpecCIDR {
	if m != nil {
		return m.FromCIDRs
	}
	return nil
}

func (m *Ingress) GetFromEntities() []string {
	if m != nil {
		return m.FromEntities
	}
	return nil
}

type KnoxNetworkLog struct {
	FlowID               int32    `protobuf:"varint,1,opt,name=FlowID,proto3" json:"FlowID,omitempty"`
	ClusterName          string   `protobuf:"bytes,2,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	SrcNamespace         string   `protobuf:"bytes,3,opt,name=SrcNamespace,proto3" json:"SrcNamespace,omitempty"`
	SrcPodName           string   `protobuf:"bytes,4,opt,name=SrcPodName,proto3" json:"SrcPodName,omitempty"`
	DstNamespace         string   `protobuf:"bytes,5,opt,name=DstNamespace,proto3" json:"DstNamespace,omitempty"`
	DstPodName           string   `protobuf:"bytes,6,opt,name=DstPodName,proto3" json:"DstPodName,omitempty"`
	EtherType            int32    `protobuf:"varint,7,opt,name=EtherType,proto3" json:"EtherType,omitempty"`
	Protocol             int32    `protobuf:"varint,8,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	SrcIP                string   `protobuf:"bytes,9,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	DstIP                string   `protobuf:"bytes,10,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	SrcPort              int32    `protobuf:"varint,11,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort              int32    `protobuf:"varint,12,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	SynFlag              bool     `protobuf:"varint,13,opt,name=SynFlag,proto3" json:"SynFlag,omitempty"`
	IsReply              bool     `protobuf:"varint,14,opt,name=IsReply,proto3" json:"IsReply,omitempty"`
	DNSQuery             string   `protobuf:"bytes,15,opt,name=DNSQuery,proto3" json:"DNSQuery,omitempty"`
	DNSRes               string   `protobuf:"bytes,16,opt,name=DNSRes,proto3" json:"DNSRes,omitempty"`
	DNSResIPs            []string `protobuf:"bytes,17,rep,name=DNSResIPs,proto3" json:"DNSResIPs,omitempty"`
	HTTPMethod           string   `protobuf:"bytes,18,opt,name=HTTPMethod,proto3" json:"HTTPMethod,omitempty"`
	HTTPPath             string   `protobuf:"bytes,19,opt,name=HTTPPath,proto3" json:"HTTPPath,omitempty"`
	Direction            string   `protobuf:"bytes,20,opt,name=Direction,proto3" json:"Direction,omitempty"`
	Action               string   `protobuf:"bytes,21,opt,name=Action,proto3" json:"Action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KnoxNetworkLog) Reset()         { *m = KnoxNetworkLog{} }
func (m *KnoxNetworkLog) String() string { return proto.CompactTextString(m) }
func (*KnoxNetworkLog) ProtoMessage()    {}
func (*KnoxNetworkLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{21}
}

func (m *KnoxNetworkLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnoxNetworkLog.Unmarshal(m, b)
}
func (m *KnoxNetworkLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnoxNetworkLog.Marshal(b, m, deterministic)
}
func (m *KnoxNetworkLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnoxNetworkLog.Merge(m, src)
}
func (m *KnoxNetworkLog) XXX_Size() int {
	return xxx_messageInfo_KnoxNetworkLog.Size(m)
}
func (m *KnoxNetworkLog) XXX_DiscardUnknown() {
	xxx_messageInfo_KnoxNetworkLog.DiscardUnknown(m)
}

var xxx_messageInfo_KnoxNetworkLog proto.InternalMessageInfo

func (m *KnoxNetworkLog) GetFlowID() int32 {
	if m != nil {
		return m.FlowID
	}
	return 0
}

func (m *KnoxNetworkLog) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *KnoxNetworkLog) GetSrcNamespace() string {
	if m != nil {
		return m.SrcNamespace
	}
	return ""
}

func (m *KnoxNetworkLog) GetSrcPodName() string {
	if m != nil {
		return m.SrcPodName
	}
	return ""
}

func (m *KnoxNetworkLog) GetDstNamespace() string {
	if m != nil {
		return m.DstNamespace
	}
	return ""
}

func (m *KnoxNetworkLog) GetDstPodName() string {
	if m != nil {
		return m.DstPodName
	}
	return ""
}

func (m *KnoxNetworkLog) GetEtherType() int32 {
	if m != nil {
		return m.EtherType
	}
	return 0
}

func (m *KnoxNetworkLog) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *KnoxNetworkLog) GetSrcIP() string {
	if m != nil {
		return m.SrcIP
	}
	return ""
}

func (m *KnoxNetworkLog) GetDstIP() string {
	if m != nil {
		return m.DstIP
	}
	return ""
}

func (m *KnoxNetworkLog) GetSrcPort() int32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *KnoxNetworkLog) GetDstPort() int32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *KnoxNetworkLog) GetSynFlag() bool {
	if m != nil {
		return m.SynFlag
	}
	return false
}

func (m *KnoxNetworkLog) GetIsReply() bool {
	if m != nil {
		return m.IsReply
	}
	return false
}

func (m *KnoxNetworkLog) GetDNSQuery() string {
	if m != nil {
		return m.DNSQuery
	}
	return ""
}

func (m *KnoxNetworkLog) GetDNSRes() string {
	if m != nil {
		return m.DNSRes
	}
	return ""
}

func (m *KnoxNetworkLog) GetDNSResIPs() []string {
	if m != nil {
		return m.DNSResIPs
	}
	return nil
}

func (m *KnoxNetworkLog) GetHTTPMethod() string {
	if m != nil {
		return m.HTTPMethod
	}
	return ""
}

func (m *KnoxNetworkLog) GetHTTPPath() string {
	if m != nil {
		return m.HTTPPath
	}
	return ""
}

func (m *KnoxNetworkLog) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *KnoxNetworkLog) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type KnoxSystemLog struct {
	LogID                int32    `protobuf:"varint,1,opt,name=LogID,proto3" json:"LogID,omitempty"`
	ClusterName          string   `protobuf:"bytes,2,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	HostName             string   `protobuf:"bytes,3,opt,name=HostName,proto3" json:"HostName,omitempty"`
	Namespace            string   `protobuf:"bytes,4,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	PodName              string   `protobuf:"bytes,5,opt,name=PodName,proto3" json:"PodName,omitempty"`
	SourceOrigin         string   `protobuf:"bytes,6,opt,name=SourceOrigin,proto3" json:"SourceOrigin,omitempty"`
	Source               string   `protobuf:"bytes,7,opt,name=Source,proto3" json:"Source,omitempty"`
	Operation            string   `protobuf:"bytes,8,opt,name=Operation,proto3" json:"Operation,omitempty"`
	ResourceOrigin       string   `protobuf:"bytes,9,opt,name=ResourceOrigin,proto3" json:"ResourceOrigin,omitempty"`
	Resource             string   `protobuf:"bytes,10,opt,name=Resource,proto3" json:"Resource,omitempty"`
	Data                 string   `protobuf:"bytes,11,opt,name=Data,proto3" json:"Data,omitempty"`
	ReadOnly             bool     `protobuf:"varint,12,opt,name=ReadOnly,proto3" json:"ReadOnly,omitempty"`
	Result               string   `protobuf:"bytes,13,opt,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KnoxSystemLog) Reset()         { *m = KnoxSystemLog{} }
func (m *KnoxSystemLog) String() string { return proto.CompactTextString(m) }
func (*KnoxSystemLog) ProtoMessage()    {}
func (*KnoxSystemLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_90398d2328ab17be, []int{22}
}

func (m *KnoxSystemLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KnoxSystemLog.Unmarshal(m, b)
}
func (m *KnoxSystemLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KnoxSystemLog.Marshal(b, m, deterministic)
}
func (m *KnoxSystemLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KnoxSystemLog.Merge(m, src)
}
func (m *KnoxSystemLog) XXX_Size() int {
	return xxx_messageInfo_KnoxSystemLog.Size(m)
}
func (m *KnoxSystemLog) XXX_DiscardUnknown() {
	xxx_messageInfo_KnoxSystemLog.DiscardUnknown(m)
}

var xxx_messageInfo_KnoxSystemLog proto.InternalMessageInfo

func (m *KnoxSystemLog) GetLogID() int32 {
	if m != nil {
		return m.LogID
	}
	return 0
}

func (m *KnoxSystemLog) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *KnoxSystemLog) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *KnoxSystemLog) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *KnoxSystemLog) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *KnoxSystemLog) GetSourceOrigin() string {
	if m != nil {
		return m.SourceOrigin
	}
	return ""
}

func (m *KnoxSystemLog) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *KnoxSystemLog) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *KnoxSystemLog) GetResourceOrigin() string {
	if m != nil {
		return m.ResourceOrigin
	}
	return ""
}

func (m *KnoxSystemLog) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *KnoxSystemLog) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *KnoxSystemLog) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *KnoxSystemLog) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*NetworkLogs)(nil), "v1.analyzer.NetworkLogs")
	proto.RegisterType((*NetworkPolicies)(nil), "v1.analyzer.NetworkPolicies")
	proto.RegisterType((*SystemLogs)(nil), "v1.analyzer.SystemLogs")
	proto.RegisterType((*SystemPolicies)(nil), "v1.analyzer.SystemPolicies")
	proto.RegisterType((*Selector)(nil), "v1.analyzer.Selector")
	proto.RegisterMapType((map[string]string)(nil), "v1.analyzer.Selector.MatchLabelsEntry")
	proto.RegisterType((*KnoxSystemPolicy)(nil), "v1.analyzer.KnoxSystemPolicy")
	proto.RegisterMapType((map[string]string)(nil), "v1.analyzer.KnoxSystemPolicy.MetadataEntry")
	proto.RegisterType((*KnoxSystemSpec)(nil), "v1.analyzer.KnoxSystemSpec")
	proto.RegisterType((*KnoxSys)(nil), "v1.analyzer.KnoxSys")
	proto.RegisterType((*KnoxMatchProtocols)(nil), "v1.analyzer.KnoxMatchProtocols")
	proto.RegisterType((*KnoxMatchPaths)(nil), "v1.analyzer.KnoxMatchPaths")
	proto.RegisterType((*KnoxMatchDirectories)(nil), "v1.analyzer.KnoxMatchDirectories")
	proto.RegisterType((*KnoxFromSource)(nil), "v1.analyzer.KnoxFromSource")
	proto.RegisterType((*KnoxNetworkPolicy)(nil), "v1.analyzer.KnoxNetworkPolicy")
	proto.RegisterMapType((map[string]string)(nil), "v1.analyzer.KnoxNetworkPolicy.MetadataEntry")
	proto.RegisterType((*KnoxNetworkSpec)(nil), "v1.analyzer.KnoxNetworkSpec")
	proto.RegisterType((*Egress)(nil), "v1.analyzer.Egress")
	proto.RegisterMapType((map[string]string)(nil), "v1.analyzer.Egress.MatchLabelsEntry")
	proto.RegisterType((*SpecPort)(nil), "v1.analyzer.SpecPort")
	proto.RegisterType((*SpecCIDR)(nil), "v1.analyzer.SpecCIDR")
	proto.RegisterType((*SpecService)(nil), "v1.analyzer.SpecService")
	proto.RegisterType((*SpecFQDN)(nil), "v1.analyzer.SpecFQDN")
	proto.RegisterType((*SpecHTTP)(nil), "v1.analyzer.SpecHTTP")
	proto.RegisterType((*Ingress)(nil), "v1.analyzer.Ingress")
	proto.RegisterMapType((map[string]string)(nil), "v1.analyzer.Ingress.MatchLabelsEntry")
	proto.RegisterType((*KnoxNetworkLog)(nil), "v1.analyzer.KnoxNetworkLog")
	proto.RegisterType((*KnoxSystemLog)(nil), "v1.analyzer.KnoxSystemLog")
}

func init() { proto.RegisterFile("v1/analyzer/analyzer.proto", fileDescriptor_90398d2328ab17be) }

var fileDescriptor_90398d2328ab17be = []byte{
	// 1550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcf, 0x72, 0x1b, 0x45,
	0x13, 0x2f, 0xfd, 0x97, 0x5b, 0xb1, 0xe3, 0x4c, 0x9c, 0x7c, 0x5b, 0x8e, 0xbf, 0x7c, 0xfe, 0xb6,
	0x42, 0xca, 0x05, 0x94, 0x5c, 0x76, 0x08, 0x84, 0xa4, 0x48, 0x62, 0x22, 0xdb, 0x51, 0xc5, 0x96,
	0xe5, 0x91, 0x2a, 0x07, 0x6e, 0x9b, 0xd5, 0x94, 0xbc, 0x15, 0x59, 0xab, 0xda, 0x19, 0xd9, 0x11,
	0x37, 0xde, 0x01, 0x4e, 0x1c, 0x38, 0xf0, 0x02, 0xdc, 0x39, 0xc3, 0x8d, 0x97, 0xa0, 0x78, 0x10,
	0xaa, 0xa7, 0x67, 0xf6, 0x8f, 0x24, 0xbb, 0x12, 0x02, 0xc5, 0xc5, 0xde, 0xee, 0xf9, 0x4d, 0x4f,
	0x4f, 0x6f, 0xf7, 0xaf, 0x5b, 0x0b, 0xab, 0x67, 0x5b, 0x9b, 0xde, 0xd0, 0x1b, 0x4c, 0xbe, 0x16,
	0x51, 0xfc, 0x50, 0x1f, 0x45, 0xa1, 0x0a, 0x59, 0xed, 0x6c, 0xab, 0x6e, 0x55, 0xee, 0x53, 0xa8,
	0xb5, 0x84, 0x3a, 0x0f, 0xa3, 0xd7, 0x07, 0x61, 0x5f, 0xb2, 0x2d, 0x28, 0xb5, 0xce, 0x0f, 0xc2,
	0xbe, 0x93, 0x5b, 0x2f, 0x6c, 0xd4, 0xb6, 0x6f, 0xd5, 0x53, 0xd8, 0xfa, 0x8b, 0x61, 0xf8, 0x26,
	0x01, 0x73, 0x42, 0xba, 0xc7, 0x70, 0xd5, 0x28, 0xdb, 0xe1, 0x20, 0xf0, 0x03, 0x21, 0xd9, 0x63,
	0x80, 0xd6, 0xb9, 0x95, 0x8c, 0xa9, 0xdb, 0x17, 0x99, 0xd2, 0xb8, 0x09, 0x4f, 0xed, 0x70, 0x9f,
	0x02, 0x74, 0x26, 0x52, 0x89, 0x53, 0xed, 0xd3, 0x36, 0x94, 0x3b, 0x13, 0x99, 0x38, 0xb5, 0x3a,
	0x63, 0x29, 0x06, 0x73, 0x83, 0x74, 0x8f, 0x61, 0x89, 0x94, 0xb1, 0x4f, 0x4f, 0xa0, 0xd6, 0x99,
	0xc8, 0x29, 0xa7, 0xfe, 0x7b, 0x81, 0x29, 0xe3, 0x53, 0x7a, 0x87, 0xfb, 0x6d, 0x0e, 0xaa, 0x1d,
	0x31, 0x10, 0xbe, 0x0a, 0x23, 0xf6, 0x1c, 0x6a, 0x87, 0x9e, 0xf2, 0x4f, 0x0e, 0xbc, 0x57, 0x62,
	0x60, 0xad, 0xdd, 0xcd, 0x58, 0xb3, 0xd8, 0x7a, 0x0a, 0xb8, 0x3b, 0x54, 0xd1, 0x84, 0xa7, 0xb7,
	0xae, 0x3e, 0x86, 0xe5, 0x69, 0x00, 0x5b, 0x86, 0xc2, 0x6b, 0x31, 0x71, 0x72, 0xeb, 0xb9, 0x8d,
	0x05, 0x8e, 0x8f, 0x6c, 0x05, 0x4a, 0x67, 0xde, 0x60, 0x2c, 0x9c, 0xbc, 0xd6, 0x91, 0xf0, 0x30,
	0xff, 0x20, 0xe7, 0xfe, 0x92, 0x87, 0xe5, 0x69, 0xc7, 0xd9, 0x6d, 0x80, 0x9d, 0x76, 0xf3, 0xa5,
	0x88, 0x64, 0x10, 0x0e, 0x8d, 0x9d, 0x94, 0x86, 0x31, 0x28, 0xbe, 0x08, 0x86, 0x3d, 0x63, 0x4d,
	0x3f, 0xb3, 0x7d, 0xa8, 0x1e, 0x0a, 0xe5, 0xf5, 0x3c, 0xe5, 0x39, 0x05, 0x7d, 0x9f, 0x8f, 0x2e,
	0x8d, 0x4e, 0xdd, 0xa2, 0xe9, 0x52, 0xf1, 0x66, 0xb6, 0x0a, 0xd5, 0xa3, 0xb1, 0xea, 0x79, 0x4a,
	0xf4, 0x9c, 0xa2, 0x3e, 0x20, 0x96, 0xd9, 0x7d, 0xa8, 0x74, 0x26, 0xb2, 0x33, 0x12, 0xbe, 0x53,
	0x5a, 0xcf, 0xcd, 0xcd, 0x30, 0x3a, 0x03, 0x21, 0xdc, 0x62, 0xd9, 0x1d, 0x58, 0xdc, 0x17, 0x43,
	0x11, 0xa1, 0x8d, 0x6e, 0x70, 0x2a, 0x9c, 0xf2, 0x7a, 0x6e, 0xa3, 0xc0, 0xb3, 0xca, 0xd5, 0x47,
	0xb0, 0x98, 0xf1, 0xe9, 0x9d, 0xe2, 0xf8, 0x6b, 0x1e, 0x96, 0xb2, 0xc7, 0xe3, 0x45, 0x3a, 0xe2,
	0x4c, 0x44, 0x81, 0x22, 0x1b, 0x25, 0x1e, 0xcb, 0x18, 0xc1, 0xae, 0xd7, 0x97, 0x4e, 0x7e, 0xbd,
	0x80, 0x11, 0xc4, 0x67, 0xe6, 0x40, 0xe5, 0x50, 0x48, 0xe9, 0xf5, 0x85, 0x53, 0xd0, 0xe6, 0xad,
	0xc8, 0xbe, 0xb0, 0xe9, 0x68, 0x93, 0x42, 0x07, 0xa6, 0xb6, 0x7d, 0x63, 0x6e, 0xc6, 0xf0, 0x29,
	0x30, 0xab, 0x43, 0xa5, 0x1d, 0x85, 0xbe, 0x90, 0xd2, 0x44, 0x6d, 0x65, 0x5e, 0xd4, 0xb8, 0x05,
	0xb1, 0x0d, 0x28, 0xee, 0x05, 0x03, 0x8a, 0xd2, 0x45, 0x60, 0x8d, 0x60, 0x9f, 0x43, 0xc5, 0x94,
	0xa1, 0x53, 0xd1, 0xef, 0xfc, 0x7f, 0x33, 0x60, 0x9d, 0x9d, 0x6d, 0x64, 0x0e, 0x3f, 0x1c, 0x48,
	0x6e, 0xf1, 0xec, 0x26, 0x94, 0x77, 0x7c, 0x85, 0xf9, 0x55, 0xd5, 0x97, 0x35, 0x92, 0xfb, 0x5d,
	0x0e, 0x2a, 0xe6, 0x10, 0xf6, 0x08, 0x80, 0xb6, 0x7b, 0xea, 0x44, 0x5e, 0xc8, 0x29, 0x09, 0x84,
	0xa7, 0xe0, 0xec, 0xd0, 0x54, 0x46, 0x23, 0x88, 0x74, 0x18, 0xb0, 0x6c, 0xf3, 0xda, 0xc4, 0xff,
	0xe7, 0x9b, 0x48, 0x01, 0xf9, 0xcc, 0x56, 0xf7, 0x14, 0xd8, 0xec, 0x75, 0xf0, 0x1d, 0x5b, 0xc1,
	0xe4, 0x49, 0x2c, 0xa3, 0xf7, 0x7b, 0x51, 0x78, 0xda, 0x09, 0xc7, 0x91, 0x2f, 0xcc, 0xd1, 0xb3,
	0xde, 0x27, 0x10, 0x9e, 0x82, 0xbb, 0xdf, 0xe7, 0x28, 0x9f, 0x52, 0x17, 0x62, 0x50, 0xc4, 0x07,
	0x73, 0x8e, 0x7e, 0xc6, 0xf3, 0xb9, 0xf0, 0x7a, 0x47, 0xc3, 0xc1, 0x44, 0xe7, 0x64, 0x95, 0xc7,
	0x32, 0x5b, 0x83, 0x85, 0xa3, 0xf3, 0xa1, 0x88, 0xf4, 0x62, 0x41, 0x2f, 0x26, 0x8a, 0x29, 0xef,
	0x8a, 0xef, 0xe6, 0xdd, 0x0f, 0x39, 0x58, 0x99, 0x17, 0x37, 0x2c, 0x99, 0x46, 0x10, 0xd9, 0x92,
	0x69, 0x04, 0xd1, 0xbf, 0xe5, 0x61, 0x97, 0xc2, 0x97, 0x68, 0xe6, 0x86, 0xcf, 0xb8, 0x9b, 0x4f,
	0xdc, 0x5d, 0x83, 0x05, 0x2e, 0xfc, 0x71, 0x24, 0x83, 0x33, 0x61, 0x5d, 0x8a, 0x15, 0xee, 0xef,
	0x79, 0xb8, 0x36, 0xd3, 0x7b, 0xfe, 0x12, 0x5d, 0x3a, 0x50, 0xd9, 0x1b, 0x84, 0xe7, 0xcd, 0x86,
	0xd4, 0x6c, 0x59, 0xe2, 0x56, 0x64, 0xcf, 0x53, 0x44, 0x4a, 0x97, 0xfe, 0xf8, 0xf2, 0xde, 0xf7,
	0x56, 0x4c, 0x5a, 0x9a, 0x62, 0xd2, 0x4f, 0x75, 0xe5, 0x6a, 0x26, 0xa5, 0x32, 0x5f, 0xbb, 0xe8,
	0x10, 0xa2, 0x52, 0x03, 0x9e, 0xa5, 0xd2, 0xca, 0xdf, 0x4e, 0xa5, 0x3f, 0xe7, 0xe0, 0xea, 0xd4,
	0xf9, 0xec, 0x49, 0x3c, 0x25, 0xc4, 0x14, 0x98, 0xbb, 0x8c, 0x02, 0xa7, 0xd1, 0x6c, 0x0b, 0x16,
	0x76, 0xfb, 0x91, 0x90, 0x12, 0x59, 0x90, 0x6a, 0xf1, 0x7a, 0x66, 0x2b, 0xad, 0xf2, 0x04, 0xc5,
	0x3e, 0x01, 0x68, 0x0e, 0xe3, 0x3d, 0xd4, 0xd3, 0xb2, 0x64, 0x68, 0x96, 0x79, 0x0a, 0xe7, 0xfe,
	0x54, 0x80, 0x32, 0xd9, 0x60, 0x7b, 0xf3, 0xba, 0xfc, 0x9d, 0x39, 0xa7, 0x5e, 0xde, 0xe3, 0xd9,
	0x26, 0x54, 0xba, 0x61, 0x3b, 0x8c, 0x94, 0xf5, 0x7c, 0xea, 0xd2, 0x23, 0xe1, 0xe3, 0x2a, 0xb7,
	0x28, 0xda, 0xf0, 0xac, 0xd9, 0xe0, 0xd6, 0xed, 0xd9, 0x0d, 0xb8, 0xca, 0x2d, 0x8a, 0xad, 0x43,
	0xad, 0x1b, 0xee, 0x0e, 0x7b, 0x2a, 0x50, 0x48, 0x93, 0x45, 0xdd, 0x95, 0xd2, 0x2a, 0xf6, 0x00,
	0xa0, 0x1b, 0x76, 0x44, 0x74, 0x16, 0xf8, 0x02, 0xdb, 0x08, 0x5a, 0x75, 0x66, 0xac, 0x1a, 0x00,
	0x4f, 0x61, 0xc9, 0x99, 0xbd, 0xe3, 0x46, 0x4b, 0x3a, 0xe5, 0x0b, 0x9c, 0xc1, 0x55, 0x6e, 0x51,
	0xb4, 0xe1, 0x79, 0xb7, 0xdb, 0x96, 0xa6, 0xa9, 0xcc, 0x6e, 0xc0, 0x55, 0x6e, 0x51, 0xef, 0x3d,
	0x03, 0x3d, 0x84, 0xaa, 0x8d, 0xa1, 0x66, 0x89, 0x30, 0x52, 0x31, 0x4b, 0xa0, 0x2e, 0x4d, 0xf2,
	0xf9, 0x2c, 0xc9, 0xbb, 0x0f, 0x68, 0x2f, 0x86, 0x11, 0x4f, 0xa0, 0xa0, 0xe7, 0x74, 0xfc, 0x48,
	0xc0, 0x46, 0xb7, 0xfb, 0xc6, 0x17, 0x23, 0x65, 0x9a, 0xbd, 0x91, 0xdc, 0x43, 0xa8, 0xa5, 0x42,
	0x86, 0xaf, 0xc0, 0x3c, 0xb6, 0xbc, 0x53, 0x61, 0xce, 0x4f, 0xab, 0x90, 0x9a, 0xf0, 0xbf, 0x1c,
	0x79, 0xbe, 0xbd, 0x44, 0xa2, 0x70, 0x3f, 0x24, 0x47, 0x30, 0x84, 0x48, 0x48, 0x3a, 0x20, 0x7a,
	0xd5, 0x78, 0x93, 0xd2, 0xb8, 0x2f, 0x09, 0x8b, 0xd1, 0x43, 0xf7, 0x0e, 0x85, 0x3a, 0x09, 0x7b,
	0xe6, 0x48, 0x23, 0xc5, 0x74, 0x99, 0x4f, 0xd1, 0x25, 0x12, 0x5d, 0xbf, 0x1f, 0x89, 0xbe, 0xa6,
	0x14, 0x62, 0xc7, 0x94, 0xc6, 0xfd, 0x2d, 0x0f, 0x15, 0x53, 0x0a, 0x6c, 0x7f, 0x5e, 0xf2, 0x7f,
	0x30, 0xaf, 0x7c, 0xfe, 0x91, 0xec, 0xa7, 0xfc, 0x29, 0xbc, 0x4d, 0xfe, 0xb0, 0x7b, 0xb0, 0x80,
	0x7d, 0x82, 0xde, 0x5d, 0xf1, 0xb2, 0x82, 0x49, 0x70, 0xcc, 0x85, 0x2b, 0x28, 0xec, 0x0e, 0x4d,
	0xcd, 0x94, 0x74, 0x94, 0x33, 0xba, 0xf7, 0x4e, 0xcc, 0x3f, 0x8a, 0xd4, 0xc5, 0x92, 0x5f, 0x4d,
	0xf8, 0xba, 0xa8, 0x51, 0x98, 0x91, 0xd2, 0x48, 0x98, 0x3e, 0xcf, 0x06, 0x63, 0xa9, 0x44, 0xa4,
	0xd3, 0x87, 0x4c, 0xa5, 0x55, 0xe8, 0x70, 0x27, 0xf2, 0x93, 0x0c, 0xa2, 0x19, 0x33, 0xa3, 0xc3,
	0x17, 0xdc, 0x89, 0xfc, 0x76, 0xd8, 0xd3, 0x46, 0x68, 0xfa, 0x4e, 0x69, 0xd0, 0x46, 0x43, 0xaa,
	0xc4, 0x06, 0x75, 0x95, 0x8c, 0x0e, 0x6d, 0x34, 0xa4, 0xb2, 0x36, 0xca, 0x64, 0x23, 0xd1, 0x60,
	0x1a, 0xef, 0xaa, 0x13, 0x11, 0x75, 0x27, 0x23, 0xea, 0x1e, 0x25, 0x9e, 0x28, 0x32, 0xb5, 0x56,
	0xa5, 0xa1, 0x39, 0x1e, 0xa8, 0x56, 0xa0, 0xd4, 0x89, 0xfc, 0x66, 0xdb, 0x59, 0xa0, 0x40, 0x69,
	0x01, 0xb5, 0x0d, 0xa9, 0x9a, 0x6d, 0x07, 0x48, 0xab, 0x05, 0xec, 0xaf, 0xda, 0xef, 0x48, 0x39,
	0x35, 0x6d, 0xc6, 0x8a, 0xb8, 0xa2, 0xbd, 0x89, 0x94, 0x73, 0x85, 0x56, 0x8c, 0xa8, 0xf7, 0x4c,
	0x86, 0x7b, 0x03, 0xaf, 0xef, 0x2c, 0xea, 0xdc, 0xb6, 0x22, 0xae, 0x34, 0x25, 0x17, 0xa3, 0xc1,
	0xc4, 0x59, 0xa2, 0x15, 0x23, 0xa2, 0xbf, 0x8d, 0x56, 0xe7, 0x78, 0x2c, 0xa2, 0x89, 0x73, 0x95,
	0xb8, 0xc1, 0xca, 0xf8, 0xae, 0x1a, 0xad, 0x0e, 0x17, 0xd2, 0x59, 0xa6, 0xd2, 0x22, 0x09, 0x23,
	0x40, 0x4f, 0xcd, 0xb6, 0x74, 0xae, 0xe9, 0xbc, 0x49, 0x14, 0x18, 0x3f, 0x4c, 0x4b, 0x53, 0x94,
	0x8c, 0xe2, 0x97, 0x68, 0xf0, 0x44, 0x94, 0x74, 0x71, 0x5e, 0xa7, 0x13, 0xad, 0xac, 0x2d, 0xeb,
	0x69, 0x0c, 0x07, 0x91, 0x15, 0xa2, 0x88, 0x58, 0x91, 0x1a, 0xb9, 0x6f, 0x64, 0x46, 0xee, 0x6f,
	0x0a, 0xb0, 0x98, 0xf9, 0x1d, 0x8c, 0x31, 0x3d, 0x08, 0xfb, 0x71, 0x92, 0x91, 0xf0, 0x16, 0x39,
	0x86, 0xbe, 0x85, 0x94, 0x0c, 0x26, 0xbf, 0x62, 0x39, 0x4b, 0x5f, 0xc5, 0x29, 0xfa, 0xc2, 0x08,
	0xdb, 0x94, 0xa1, 0xa4, 0xaa, 0xa4, 0x72, 0x8e, 0x26, 0xb8, 0xa3, 0x28, 0xe8, 0x07, 0x43, 0x93,
	0x51, 0x19, 0x1d, 0xde, 0xcc, 0x8c, 0x89, 0x15, 0xba, 0x99, 0x99, 0xf9, 0x70, 0xc0, 0x1c, 0xe1,
	0x5c, 0x92, 0xfc, 0xce, 0x48, 0x14, 0xec, 0x2e, 0x2c, 0x71, 0x21, 0xd3, 0xb6, 0x29, 0xb1, 0xa6,
	0xb4, 0x34, 0xc2, 0x92, 0xc6, 0x24, 0x59, 0x2c, 0x23, 0x4d, 0x36, 0x70, 0x52, 0xab, 0x11, 0x4d,
	0x36, 0xcc, 0xdc, 0x15, 0x8f, 0xbc, 0x57, 0xa6, 0x46, 0xde, 0x9b, 0x50, 0xe6, 0x42, 0x8e, 0x07,
	0x4a, 0xa7, 0xd8, 0x02, 0x37, 0xd2, 0xf6, 0x8f, 0x39, 0xa8, 0xee, 0x18, 0xbe, 0x61, 0x07, 0xc0,
	0xf6, 0x85, 0x9a, 0xfe, 0x2c, 0x92, 0x6d, 0xb7, 0xa9, 0xcf, 0x2e, 0xab, 0x6b, 0xf3, 0x56, 0xe2,
	0x7d, 0x4d, 0xb8, 0xb6, 0x2f, 0xd4, 0xd4, 0xf7, 0x8c, 0xff, 0x64, 0x09, 0x2e, 0xfe, 0x5c, 0xb2,
	0x7a, 0x6b, 0xce, 0x82, 0xdd, 0xf5, 0xe5, 0x67, 0x5f, 0xdd, 0xef, 0x07, 0xea, 0x64, 0xfc, 0xaa,
	0xee, 0x87, 0xa7, 0x9b, 0x9e, 0xef, 0x8f, 0x5f, 0x0f, 0xc3, 0x37, 0x9b, 0xf8, 0x67, 0x67, 0xac,
	0x42, 0x9a, 0x47, 0x37, 0xf5, 0x77, 0x22, 0xb9, 0x99, 0xfa, 0x86, 0xf4, 0xaa, 0xac, 0x75, 0xf7,
	0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xfd, 0xd9, 0x82, 0x59, 0x12, 0x00, 0x00,
}
