// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: v1/config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigName string  `protobuf:"bytes,1,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	Config     *Config `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigRequest) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *ConfigRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string    `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Config []*Config `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ConfigResponse) GetConfig() []*Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConfigDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbDriver              string `protobuf:"bytes,1,opt,name=db_driver,json=dbDriver,proto3" json:"db_driver,omitempty"`
	DbHost                string `protobuf:"bytes,2,opt,name=db_host,json=dbHost,proto3" json:"db_host,omitempty"`
	DbPort                string `protobuf:"bytes,3,opt,name=db_port,json=dbPort,proto3" json:"db_port,omitempty"`
	DbUser                string `protobuf:"bytes,4,opt,name=db_user,json=dbUser,proto3" json:"db_user,omitempty"`
	DbPass                string `protobuf:"bytes,5,opt,name=db_pass,json=dbPass,proto3" json:"db_pass,omitempty"`
	DbName                string `protobuf:"bytes,6,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	TableNetworkFlow      string `protobuf:"bytes,7,opt,name=table_network_flow,json=tableNetworkFlow,proto3" json:"table_network_flow,omitempty"`
	TableDiscoveredPolicy string `protobuf:"bytes,8,opt,name=table_discovered_policy,json=tableDiscoveredPolicy,proto3" json:"table_discovered_policy,omitempty"`
}

func (x *ConfigDB) Reset() {
	*x = ConfigDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDB) ProtoMessage() {}

func (x *ConfigDB) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDB.ProtoReflect.Descriptor instead.
func (*ConfigDB) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigDB) GetDbDriver() string {
	if x != nil {
		return x.DbDriver
	}
	return ""
}

func (x *ConfigDB) GetDbHost() string {
	if x != nil {
		return x.DbHost
	}
	return ""
}

func (x *ConfigDB) GetDbPort() string {
	if x != nil {
		return x.DbPort
	}
	return ""
}

func (x *ConfigDB) GetDbUser() string {
	if x != nil {
		return x.DbUser
	}
	return ""
}

func (x *ConfigDB) GetDbPass() string {
	if x != nil {
		return x.DbPass
	}
	return ""
}

func (x *ConfigDB) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *ConfigDB) GetTableNetworkFlow() string {
	if x != nil {
		return x.TableNetworkFlow
	}
	return ""
}

func (x *ConfigDB) GetTableDiscoveredPolicy() string {
	if x != nil {
		return x.TableDiscoveredPolicy
	}
	return ""
}

type ConfigCiliumHubble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HubbleUrl  string `protobuf:"bytes,1,opt,name=hubble_url,json=hubbleUrl,proto3" json:"hubble_url,omitempty"`
	HubblePort string `protobuf:"bytes,2,opt,name=hubble_port,json=hubblePort,proto3" json:"hubble_port,omitempty"`
}

func (x *ConfigCiliumHubble) Reset() {
	*x = ConfigCiliumHubble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigCiliumHubble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigCiliumHubble) ProtoMessage() {}

func (x *ConfigCiliumHubble) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigCiliumHubble.ProtoReflect.Descriptor instead.
func (*ConfigCiliumHubble) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigCiliumHubble) GetHubbleUrl() string {
	if x != nil {
		return x.HubbleUrl
	}
	return ""
}

func (x *ConfigCiliumHubble) GetHubblePort() string {
	if x != nil {
		return x.HubblePort
	}
	return ""
}

type IgnoringFlows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IgSelectorNamespace string   `protobuf:"bytes,1,opt,name=ig_selector_namespace,json=igSelectorNamespace,proto3" json:"ig_selector_namespace,omitempty"`
	IgSelectorLabels    []string `protobuf:"bytes,2,rep,name=ig_selector_labels,json=igSelectorLabels,proto3" json:"ig_selector_labels,omitempty"`
	IgTargetNamespace   string   `protobuf:"bytes,3,opt,name=ig_target_namespace,json=igTargetNamespace,proto3" json:"ig_target_namespace,omitempty"`
	IgTargetLabels      []string `protobuf:"bytes,4,rep,name=ig_target_labels,json=igTargetLabels,proto3" json:"ig_target_labels,omitempty"`
	IgProtocol          string   `protobuf:"bytes,5,opt,name=ig_protocol,json=igProtocol,proto3" json:"ig_protocol,omitempty"`
	IgPortNumber        string   `protobuf:"bytes,6,opt,name=ig_port_number,json=igPortNumber,proto3" json:"ig_port_number,omitempty"`
}

func (x *IgnoringFlows) Reset() {
	*x = IgnoringFlows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IgnoringFlows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IgnoringFlows) ProtoMessage() {}

func (x *IgnoringFlows) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IgnoringFlows.ProtoReflect.Descriptor instead.
func (*IgnoringFlows) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *IgnoringFlows) GetIgSelectorNamespace() string {
	if x != nil {
		return x.IgSelectorNamespace
	}
	return ""
}

func (x *IgnoringFlows) GetIgSelectorLabels() []string {
	if x != nil {
		return x.IgSelectorLabels
	}
	return nil
}

func (x *IgnoringFlows) GetIgTargetNamespace() string {
	if x != nil {
		return x.IgTargetNamespace
	}
	return ""
}

func (x *IgnoringFlows) GetIgTargetLabels() []string {
	if x != nil {
		return x.IgTargetLabels
	}
	return nil
}

func (x *IgnoringFlows) GetIgProtocol() string {
	if x != nil {
		return x.IgProtocol
	}
	return ""
}

func (x *IgnoringFlows) GetIgPortNumber() string {
	if x != nil {
		return x.IgPortNumber
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigName              string              `protobuf:"bytes,1,opt,name=config_name,json=configName,proto3" json:"config_name,omitempty"`
	Status                  int32               `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	ConfigDb                *ConfigDB           `protobuf:"bytes,3,opt,name=config_db,json=configDb,proto3" json:"config_db,omitempty"`
	ConfigCiliumHubble      *ConfigCiliumHubble `protobuf:"bytes,4,opt,name=config_cilium_hubble,json=configCiliumHubble,proto3" json:"config_cilium_hubble,omitempty"`
	OperationMode           int32               `protobuf:"varint,5,opt,name=operation_mode,json=operationMode,proto3" json:"operation_mode,omitempty"`
	CronjobTimeInterval     string              `protobuf:"bytes,6,opt,name=cronjob_time_interval,json=cronjobTimeInterval,proto3" json:"cronjob_time_interval,omitempty"`
	OneTimeJobTimeSelection string              `protobuf:"bytes,7,opt,name=one_time_job_time_selection,json=oneTimeJobTimeSelection,proto3" json:"one_time_job_time_selection,omitempty"`
	NetworkLogFrom          string              `protobuf:"bytes,8,opt,name=network_log_from,json=networkLogFrom,proto3" json:"network_log_from,omitempty"`
	DiscoveredPolicyTo      string              `protobuf:"bytes,9,opt,name=discovered_policy_to,json=discoveredPolicyTo,proto3" json:"discovered_policy_to,omitempty"`
	PolicyDir               string              `protobuf:"bytes,10,opt,name=policy_dir,json=policyDir,proto3" json:"policy_dir,omitempty"`
	DiscoveryPolicyTypes    int32               `protobuf:"varint,11,opt,name=discovery_policy_types,json=discoveryPolicyTypes,proto3" json:"discovery_policy_types,omitempty"`
	DiscoveryRuleTypes      int32               `protobuf:"varint,12,opt,name=discovery_rule_types,json=discoveryRuleTypes,proto3" json:"discovery_rule_types,omitempty"`
	CidrBits                int32               `protobuf:"varint,13,opt,name=cidr_bits,json=cidrBits,proto3" json:"cidr_bits,omitempty"`
	IgnoringFlows           []*IgnoringFlows    `protobuf:"bytes,14,rep,name=ignoring_flows,json=ignoringFlows,proto3" json:"ignoring_flows,omitempty"`
	L3AggregationLevel      int32               `protobuf:"varint,15,opt,name=l3_aggregation_level,json=l3AggregationLevel,proto3" json:"l3_aggregation_level,omitempty"`
	L4Compression           int32               `protobuf:"varint,16,opt,name=l4_compression,json=l4Compression,proto3" json:"l4_compression,omitempty"`
	L7AggregationLevel      int32               `protobuf:"varint,17,opt,name=l7_aggregation_level,json=l7AggregationLevel,proto3" json:"l7_aggregation_level,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_v1_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_v1_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *Config) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *Config) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Config) GetConfigDb() *ConfigDB {
	if x != nil {
		return x.ConfigDb
	}
	return nil
}

func (x *Config) GetConfigCiliumHubble() *ConfigCiliumHubble {
	if x != nil {
		return x.ConfigCiliumHubble
	}
	return nil
}

func (x *Config) GetOperationMode() int32 {
	if x != nil {
		return x.OperationMode
	}
	return 0
}

func (x *Config) GetCronjobTimeInterval() string {
	if x != nil {
		return x.CronjobTimeInterval
	}
	return ""
}

func (x *Config) GetOneTimeJobTimeSelection() string {
	if x != nil {
		return x.OneTimeJobTimeSelection
	}
	return ""
}

func (x *Config) GetNetworkLogFrom() string {
	if x != nil {
		return x.NetworkLogFrom
	}
	return ""
}

func (x *Config) GetDiscoveredPolicyTo() string {
	if x != nil {
		return x.DiscoveredPolicyTo
	}
	return ""
}

func (x *Config) GetPolicyDir() string {
	if x != nil {
		return x.PolicyDir
	}
	return ""
}

func (x *Config) GetDiscoveryPolicyTypes() int32 {
	if x != nil {
		return x.DiscoveryPolicyTypes
	}
	return 0
}

func (x *Config) GetDiscoveryRuleTypes() int32 {
	if x != nil {
		return x.DiscoveryRuleTypes
	}
	return 0
}

func (x *Config) GetCidrBits() int32 {
	if x != nil {
		return x.CidrBits
	}
	return 0
}

func (x *Config) GetIgnoringFlows() []*IgnoringFlows {
	if x != nil {
		return x.IgnoringFlows
	}
	return nil
}

func (x *Config) GetL3AggregationLevel() int32 {
	if x != nil {
		return x.L3AggregationLevel
	}
	return 0
}

func (x *Config) GetL4Compression() int32 {
	if x != nil {
		return x.L4Compression
	}
	return 0
}

func (x *Config) GetL7AggregationLevel() int32 {
	if x != nil {
		return x.L7AggregationLevel
	}
	return 0
}

var File_v1_config_config_proto protoreflect.FileDescriptor

var file_v1_config_config_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x5b, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x4d, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x8a, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x62, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x62, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x50, 0x61, 0x73, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x54, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x48, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x0d, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x67, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x67, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x67, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x67, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x67, 0x50, 0x6f, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa9, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x42, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x62, 0x12, 0x4f, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x5f, 0x68,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x69,
	0x6c, 0x69, 0x75, 0x6d, 0x48, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x48, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x1b, 0x6f, 0x6e, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x69, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69,
	0x64, 0x72, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x69, 0x64, 0x72, 0x42, 0x69, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x33, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x33, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x34,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6c, 0x34, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x37, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x6c, 0x37, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0xc1, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x63, 0x63, 0x75, 0x6b, 0x6e, 0x6f, 0x78, 0x2f, 0x6b,
	0x6e, 0x6f, 0x78, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_config_config_proto_rawDescOnce sync.Once
	file_v1_config_config_proto_rawDescData = file_v1_config_config_proto_rawDesc
)

func file_v1_config_config_proto_rawDescGZIP() []byte {
	file_v1_config_config_proto_rawDescOnce.Do(func() {
		file_v1_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_config_config_proto_rawDescData)
	})
	return file_v1_config_config_proto_rawDescData
}

var file_v1_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_v1_config_config_proto_goTypes = []interface{}{
	(*ConfigRequest)(nil),      // 0: v1.config.ConfigRequest
	(*ConfigResponse)(nil),     // 1: v1.config.ConfigResponse
	(*ConfigDB)(nil),           // 2: v1.config.ConfigDB
	(*ConfigCiliumHubble)(nil), // 3: v1.config.ConfigCiliumHubble
	(*IgnoringFlows)(nil),      // 4: v1.config.IgnoringFlows
	(*Config)(nil),             // 5: v1.config.Config
}
var file_v1_config_config_proto_depIdxs = []int32{
	5,  // 0: v1.config.ConfigRequest.config:type_name -> v1.config.Config
	5,  // 1: v1.config.ConfigResponse.config:type_name -> v1.config.Config
	2,  // 2: v1.config.Config.config_db:type_name -> v1.config.ConfigDB
	3,  // 3: v1.config.Config.config_cilium_hubble:type_name -> v1.config.ConfigCiliumHubble
	4,  // 4: v1.config.Config.ignoring_flows:type_name -> v1.config.IgnoringFlows
	0,  // 5: v1.config.ConfigStore.Add:input_type -> v1.config.ConfigRequest
	0,  // 6: v1.config.ConfigStore.Get:input_type -> v1.config.ConfigRequest
	0,  // 7: v1.config.ConfigStore.Update:input_type -> v1.config.ConfigRequest
	0,  // 8: v1.config.ConfigStore.Delete:input_type -> v1.config.ConfigRequest
	0,  // 9: v1.config.ConfigStore.Apply:input_type -> v1.config.ConfigRequest
	1,  // 10: v1.config.ConfigStore.Add:output_type -> v1.config.ConfigResponse
	1,  // 11: v1.config.ConfigStore.Get:output_type -> v1.config.ConfigResponse
	1,  // 12: v1.config.ConfigStore.Update:output_type -> v1.config.ConfigResponse
	1,  // 13: v1.config.ConfigStore.Delete:output_type -> v1.config.ConfigResponse
	1,  // 14: v1.config.ConfigStore.Apply:output_type -> v1.config.ConfigResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_v1_config_config_proto_init() }
func file_v1_config_config_proto_init() {
	if File_v1_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigCiliumHubble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IgnoringFlows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_config_config_proto_goTypes,
		DependencyIndexes: file_v1_config_config_proto_depIdxs,
		MessageInfos:      file_v1_config_config_proto_msgTypes,
	}.Build()
	File_v1_config_config_proto = out.File
	file_v1_config_config_proto_rawDesc = nil
	file_v1_config_config_proto_goTypes = nil
	file_v1_config_config_proto_depIdxs = nil
}
